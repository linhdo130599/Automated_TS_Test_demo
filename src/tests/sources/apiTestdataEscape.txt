{\r\n  \"\/root\": {\r\n    path: \"\/root\",\r\n    type: \"folder\",\r\n    isRoot: true,\r\n    children: [\"\/root\/david\", \"\/root\/jslancer\", \"\/root\/src\", \"\/root\/tests\"],\r\n  },\r\n  \"\/root\/src\": {\r\n    path: \"\/root\/src\",\r\n    type: \"folder\",\r\n    children: [\"\/root\/src\/Object.ts\", \"\/root\/src\/ObjectExample.ts\"],\r\n  },\r\n  \"\/root\/src\/Object.ts\": {\r\n    path: \"\/root\/src\/Object.ts\",\r\n    type: \"file\",\r\n    isTestFile: false,\r\n    content: \"export class School {\r\n                  public numberRoom: number;\r\n                  public area: number;\r\n                  public name: string;\r\n                  constructor(numberRoom?: number, area?: number, name?: string) {\r\n                      this.numberRoom = numberRoom;\r\n                      this.area = area;\r\n                      this.name = name;\r\n                  }\r\n\r\n                  getName() {\r\n                      return this.name;\r\n                  }\r\n              }\r\n\r\n\r\n              export class Person {\r\n\r\n                  public height: number;\r\n                  public age: number;\r\n                  public school: School;\r\n                  public schools: boolean;\r\n                  public isGirl: boolean;\r\n                  public name: string;\r\n                  public length: number;\r\n                  public phone: string[];\r\n                  private fullName: string;\r\n                  constructor(height?: number) {\r\n                      this.height = height;\r\n                  }\r\n\r\n                  getName(): string {\r\n                      return this.name;\r\n                  }\r\n\r\n                  print(s: string) {\r\n                      return this.name;\r\n                  }\r\n\r\n                  getAge(): number {\r\n                      return this.age;\r\n                  }\r\n\r\n                  getSchool(): School {\r\n                      return this.school;\r\n                  }\r\n\r\n                  static sum(a: number, b: number) {\r\n                      return a + b;\r\n                  }\r\n              }\r\n\"\r\n  },\r\n\r\n  \"\/root\/src\/ObjectExample.ts\": {\r\n    path: \"\/root\/src\/ObjectExample.ts\",\r\n    type: \"file\",\r\n    isTestFile: false,\r\n    content: \"import {Person} from \".\/Objects\";\r\n\r\n              export function caculate(person3: Person, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  let person2 = new Person();\r\n                  if (person.age == 18) {\r\n                      if (person.height > 10) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function caculate3( person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  let person2 = new Person();\r\n                  if (person.name.length > 10) {\r\n                      if (person.height > 10) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function caculate2(isBig: boolean, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  let x : boolean = true;\r\n\r\n                  let y;\r\n\r\n                  y = 1;\r\n                  y = isBig;\r\n\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  if (person.age == 18 && person.school.numberRoom > 30) {\r\n                      if (person.height > 10 && y != true) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function booleanTest(isBig: boolean, isRed: boolean): number {\r\n                  if (isBig === true) {\r\n                      if (isRed === false) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  } else return 3;\r\n              }\r\n\r\n              export function booleanTest2(isBig: boolean, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  if (person.isGirl === true && result > 30) {\r\n                      if (person.height > 10 && person.age > 18) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function stringTest(a: string, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  result = person.age;\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  if (person.school.name.length > 5) {\r\n                      if (a === \"hello\" && person.age > 21 && result <= 100 ){\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function stringTest2(a: string, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  if (!person.school.name.startsWith(\"aaaa\")) {\r\n                      if (!(a.includes(\"zzz\"))){\r\n                          if (a.length > 6)\r\n                              return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              export function stringTest3(a: string, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  let s : string = \"aaaa\";\r\n                  \/\/ a = s;\r\n                  if (person.school.name.startsWith(\"aaaa\")) {\r\n                      if (a.includes(s)){\r\n                          if (a.length > 6)\r\n                              return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              \/\/ export function compoundConditionTest(a: string, person: Person): number {\r\n              \/\/     let result = person.age + person.height;\r\n              \/\/     \/\/ let schoolRooms = person.school.numberRoom;\r\n              \/\/     if (!a.endsWith(\"hoaithu\") && !(person.age == 10 + 2) ) {\r\n              \/\/         if (!(a.includes(\"zzz\"))){\r\n              \/\/             if (!person.school.name.startsWith(\"aaaa\"))\r\n              \/\/                 return 1;\r\n              \/\/         }\r\n              \/\/         else return 2;\r\n              \/\/     }\r\n              \/\/     return result;\r\n              \/\/ }\r\n\r\n              export function compoundConditionTest(a: string, person: Person): number {\r\n                  let result = person.age + person.height;\r\n                  \/\/ let schoolRooms = person.school.numberRoom;\r\n                  if (a.endsWith(\"hoaithu\") && person.age == 10 + 2 ) {\r\n                      if (a.includes(\"zzz\")){\r\n                          if (person.school.name.startsWith(\"aaaa\"))\r\n                              return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return result;\r\n              }\r\n\r\n              \/\/ export function object_literal_expresion_test( person: Person, s: string, a: Array\r\n<number>): number {\r\n              \/\/     \/\/ let names = [\"HoaiThu\", \"QuangTuan\", {name: \"UET\"}];\r\n              \/\/     let names = [{name: \"UET\", age: 23, school: {name: \"DHCN\"}}];\r\n              \/\/     let list = [1,2,3,4,5];\r\n              \/\/     list[2] = 10;\r\n              \/\/     \/\/ let person2 = {name: \"hoaithu\", age: 23, school: {name: \"UET\"}};\r\n              \/\/     if (person.getName() === names[0].name && a[0] == 1) {\r\n              \/\/         if (person.school.getName() === names[0].school.name && names[0].name.length < list[2]) {\r\n              \/\/             return 1;\r\n              \/\/         }\r\n              \/\/         else return 2;\r\n              \/\/     }\r\n              \/\/     return 1;\r\n              \/\/ }\r\n\r\n              export function object_literal_expresion_test( person: Person, s: string, a: Array\r\n    <number>): number {\r\n                  \/\/ let names = [\"HoaiThu\", \"QuangTuan\", {name: \"UET\"}];\r\n                  let names = [{name: \"UET\", age: 23, school: {name: \"DHCN\"}}];\r\n                  let list = [1,2,3,4,5];\r\n                  list[2] = 10;\r\n                  \/\/ let person2 = {name: \"hoaithu\", age: 23, school: {name: \"UET\"}};\r\n                  \/\/ console.log(person.getName());\r\n                  \/\/ if (person.name === names[0].name && person.print(\"Dsffd\") == \"thu\") {\r\n                      if (person.name === names[0].name) {\r\n                      \/\/ console.log(person.school.getName());\r\n                      \/\/ console.log(names[0].school.name);\r\n                      if (person.school.name === names[0].school.name && names[0].name.length < list[2]) {\r\n                          return 1;\r\n                      }\r\n                      else return 2;\r\n                  }\r\n                  return 1;\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n\",\r\n    children: [\r\n      \"\/root\/src\/ObjectExample.ts\/caculate\",\r\n      \"\/root\/src\/ObjectExample.ts\/caculate3\",\r\n    ],\r\n    functions: [\"caculate\", \"caculate3\"],\r\n  },\r\n  \"\/root\/src\/ObjectExample.ts\/caculate\": {\r\n    path: \"\/root\/src\/ObjectExample.ts\/caculate\",\r\n    type: \"function\",\r\n    name: \"caculate\",\r\n    isSelected: false,\r\n  },\r\n  \"\/root\/src\/ObjectExample.ts\/caculate3\": {\r\n    path: \"\/root\/src\/ObjectExample.ts\/caculate3\",\r\n    type: \"function\",\r\n    name: \"caculate3\",\r\n    isSelected: false,\r\n  },\r\n  \"\/root\/david\": {\r\n    path: \"\/root\/david\",\r\n    type: \"folder\",\r\n    children: [\"\/root\/david\/readme.md\", \"\/root\/david\/readme2.md\"],\r\n  },\r\n  \"\/root\/david\/readme.md\": {\r\n    path: \"\/root\/david\/readme.md\",\r\n    type: \"file\",\r\n    content: \"Thanks for reading me me. But there is nothing here.\",\r\n  },\r\n  \"\/root\/david\/readme2.md\": {\r\n    path: \"\/root\/david\/readme2.md\",\r\n    type: \"file\",\r\n    content: \"Readme2.\",\r\n  },\r\n  \"\/root\/jslancer\": {\r\n    path: \"\/root\/jslancer\",\r\n    type: \"folder\",\r\n    children: [\"\/root\/jslancer\/projects\", \"\/root\/jslancer\/vblogs\"],\r\n  },\r\n  \"\/root\/jslancer\/projects\": {\r\n    path: \"\/root\/jslancer\/projects\",\r\n    type: \"folder\",\r\n    children: [\"\/root\/jslancer\/projects\/treeview\"],\r\n  },\r\n  \"\/root\/jslancer\/projects\/treeview\": {\r\n    path: \"\/root\/jslancer\/projects\/treeview\",\r\n    type: \"folder\",\r\n    children: [],\r\n  },\r\n  \"\/root\/jslancer\/vblogs\": {\r\n    path: \"\/root\/jslancer\/vblogs\",\r\n    type: \"folder\",\r\n    children: [],\r\n  },\r\n  \"\/root\/tests\": {\r\n    path: \"\/root\/tests\",\r\n    type: \"folder\",\r\n    children: [\"\/root\/tests\/ObjectExample.test.ts\"],\r\n  },\r\n  \"\/root\/tests\/ObjectExample.test.ts\": {\r\n    path: \"\/root\/tests\/ObjectExample.test.ts\",\r\n    type: \"file\",\r\n    isTestFile: true,\r\n    content: \"import {stringTest} from \"..\/src\/ObjectExample\";\r\n              import {stringTest2} from \"..\/src\/ObjectExample\";\r\n              import {stringTest3} from \"..\/src\/ObjectExample\";\r\n              import {booleanTest} from \"..\/src\/ObjectExample\";\r\n              import {booleanTest2} from \"..\/src\/ObjectExample\";\r\n              import {caculate} from \"..\/src\/ObjectExample\";\r\n              import {caculate2} from \"..\/src\/ObjectExample\";\r\n              import {object_literal_expresion_test} from \"..\/src\/ObjectExample\";\r\n              const stringTestInput =  [[\"hello\",{\"age\":22,\"school\":{\"name\":\"xxxxxx\"},\"height\":0}],[\"\",{\"age\":101,\"school\":{\"name\":\"xxxxxx\"},\"height\":0}],[\"\",{\"school\":{\"name\":\"\"},\"age\":0,\"height\":0}]] ;\r\n              describe(\"Test\",  () => {\r\n                  stringTestInput.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          stringTest.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const stringTest2Input =  [[\"xxxxxxx\",{\"age\":0,\"school\":{\"name\":\"\"},\"height\":0}],[\"\",{\"age\":0,\"school\":{\"name\":\"\"},\"height\":0}],[\"\",{\"age\":0,\"school\":{\"name\":\"\"},\"height\":0}],[\"\",{\"age\":0,\"school\":{\"name\":\"\"},\"height\":0}]] ;\r\n              describe(\"Test\",  () => {\r\n                  stringTest2Input.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          stringTest2.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const stringTest3Input =  [[\"xxxaaaa\",{\"school\":{\"name\":\"aaaa\"},\"age\":0,\"height\":0}],[\"aaaa\",{\"school\":{\"name\":\"aaaa\"},\"age\":0,\"height\":0}],[\"\",{\"school\":{\"name\":\"aaaa\"},\"age\":0,\"height\":0}],[\"\",{\"school\":{\"name\":\"axxx\"},\"age\":0,\"height\":0}]] ;\r\n              describe(\"Test\",  () => {\r\n                  stringTest3Input.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          stringTest3.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const booleanTestInput =  [[true,false],[true,true],[false,false]] ;\r\n              describe(\"Test\",  () => {\r\n                  booleanTestInput.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          booleanTest.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const booleanTest2Input =  [[false,{\"age\":20,\"height\":11,\"isGirl\":true}],[false,{\"age\":21,\"height\":10,\"isGirl\":true}],[false,{\"height\":0,\"age\":31,\"isGirl\":false}]] ;\r\n              describe(\"Test\",  () => {\r\n                  booleanTest2Input.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          booleanTest2.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const caculateInput =  [[null,{\"height\":11,\"age\":18}],[null,{\"height\":10,\"age\":18}],[null,{\"age\":19,\"height\":0}]] ;\r\n              describe(\"Test\",  () => {\r\n                  caculateInput.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          caculate.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const caculate2Input =  [[false,{\"height\":11,\"school\":{\"numberRoom\":31},\"age\":18}],[true,{\"height\":11,\"school\":{\"numberRoom\":31},\"age\":18}],[false,{\"school\":{\"numberRoom\":31},\"age\":19,\"height\":0}]] ;\r\n              describe(\"Test\",  () => {\r\n                  caculate2Input.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          caculate2.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n              const object_literal_expresion_testInput =  [[{\"school\":{\"name\":\"DHCN\"},\"name\":\"UET\"},\"\",null],[{\"school\":{\"name\":\"\"},\"name\":\"UET\"},\"\",null],[{\"name\":\"\"},\"\",null]] ;\r\n              describe(\"Test\",  () => {\r\n                  object_literal_expresion_testInput.forEach(parameters => {\r\n                      it(\"Test\",  () => {\r\n                          object_literal_expresion_test.apply(null, parameters);\r\n                      } )\r\n                  })\r\n              })\r\n\r\n\"\r\n  },\r\n};\r\n
